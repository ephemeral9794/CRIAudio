using System;
using System.IO;
using System.Text;
using CRIAudio.Container.Wave;
using CRIAudio.Decoder.HCA;
using CRIAudio.Utility;

namespace CRIAudio.CLI
{
    class Program
    {
        static void Main(string[] args)
        {
			Log.Visible = true;

            string file = @"C:\Users\Administrator\Desktop\Develop\CRIWARE_ANALYZE\snd_bgm_live_1001_oke_01.hca";
            var bin = File.ReadAllBytes(file);
            var hca = HCAData.ReadData(bin, new HCAKey(0x0000450D608C479F, 0x5CDE));

			var info = hca.Info;
			Log.WriteLine($"HCA Data Ver.{string.Format("{0,0:X4}", info.Version)}");
			Log.WriteLine($"Data Offset      : {string.Format("0x{0,0:X8}", info.DataOffset)}");
			Log.WriteLine($"Channel Count    : {info.ChannelCount}");
			Log.WriteLine($"Sample Rate      : {info.SampleRate}");
			Log.WriteLine($"Frame Count      : {info.FrameCount}");
			Log.WriteLine($"Frame Size       : {info.FrameSize}");
			Log.WriteLine($"Min Resolution   : {info.MinResolution}");
			Log.WriteLine($"Max Resolution   : {info.MaxResolution}");
			Log.WriteLine($"Track Count      : {info.TrackCount}");
			Log.WriteLine($"Channel Config   : {info.ChannelConfig}");
			Log.WriteLine($"Total Band Count : {info.TotalBandCount}");
			Log.WriteLine($"Base Band Count  : {info.BaseBandCount}");
			Log.WriteLine($"Stereo Band Count: {info.StereoBandCount}");
			Log.WriteLine($"Hfr Band Cound   : {info.HfrBandCount}");
			Log.WriteLine($"Bands/HfrGroup   : {info.BandsPerHfrGroup}");
			Log.WriteLine($"Hfr Group Count  : {info.HfrGroupCount}");
			Log.WriteLine($"MS Stereo        : {info.MSStereo}");
			Log.WriteLine();

			/*byte[] data = {
				0xFF, 0xFF, 0x60, 0x96, 0x12, 0x0B, 0xE5, 0x5D, 0x89, 0xDE, 0xB0, 0xA3, 0xAD, 0x65, 0xEC, 0x7C,
				0xBF, 0xA2, 0x57, 0x47, 0x42, 0x3F, 0x92, 0x71, 0xC7, 0x33, 0xBB, 0x33, 0xA7, 0xB3, 0x45, 0xF2,
				0xA3, 0xCB, 0xEF, 0xBA, 0x3D, 0x33, 0x95, 0xC3, 0xBC, 0xA8, 0xF4, 0x2E, 0xA1, 0x45, 0xBF, 0xCF,
				0x4F, 0x8B, 0xA3, 0x29, 0x04, 0x4A, 0xE2, 0x6A, 0xAE, 0x47, 0x3C, 0xB3, 0xFE, 0xA4, 0xE5, 0x32,
				0xFC, 0x05, 0x7C, 0x0E, 0x8D, 0x71, 0x20, 0xAD, 0xF3, 0xB5, 0xF6, 0xE2, 0x93, 0x17, 0xF8, 0x5A,
				0x61, 0xD1, 0x33, 0x26, 0x69, 0x7F, 0x35, 0xDB, 0xE3, 0xBB, 0xE6, 0xBE, 0x25, 0xD7, 0x80, 0x88,
				0xC3, 0x47, 0xD1, 0xA9, 0xA7, 0x9E, 0x06, 0x3C, 0xB4, 0x94, 0xF2, 0xF1, 0xF3, 0xB6, 0xBA, 0xE4,
				0x66, 0x71, 0x73, 0x2A, 0x04, 0x04, 0x83, 0xE6, 0xE1, 0xD1, 0xED, 0xBC, 0x3A, 0xF3, 0x4F, 0x6A,
				0x3F, 0xB1, 0xD3, 0x5D, 0x2D, 0x89, 0xA0, 0xC7, 0x7C, 0x02, 0x60, 0xDC, 0x3F, 0x1D, 0x22, 0x0C,
				0xEF, 0x2E, 0x2C, 0xC5, 0x50, 0x82, 0x8D, 0xCC, 0x47, 0x8C, 0x4E, 0x9E, 0x11, 0xCA, 0x6A, 0x0A,
				0x1E, 0xE5, 0xDF, 0xFA, 0x31, 0x0B, 0xEF, 0xE1, 0x69, 0x65, 0x0D, 0xE3, 0x79, 0xC7, 0xB0, 0x1D,
				0xE3, 0x75, 0x5E, 0xB0, 0xB3, 0xC5, 0xE4, 0x40, 0x50, 0xB1, 0xD3, 0x41, 0x5D, 0x9B, 0x61, 0x59,
				0x78, 0xA2, 0xFD, 0xEE, 0xA9, 0x61, 0x20, 0xF4, 0x9A, 0x22, 0x27, 0xC6, 0xE1, 0x19, 0x01, 0xF5,
				0xE4, 0x63, 0xF3, 0x2C, 0x5E, 0x6C, 0xA8, 0xCA, 0xE7, 0xF8, 0x46, 0x26, 0xFE, 0x68, 0xD0, 0x04,
				0x04, 0xC0, 0xCF, 0x0E, 0xBC, 0x94, 0x26, 0x5E, 0x8E, 0xDA, 0xEE, 0x41, 0xC6, 0xC3, 0xC5, 0x13,
				0xEE, 0x1F, 0xD1, 0xF9, 0x4A, 0x73, 0x7E, 0xE4, 0x16, 0x96, 0x0C, 0x7A, 0x14, 0x08, 0xEB, 0xFA,
				0x35, 0xD2, 0x98, 0xE6, 0xEE, 0x4F, 0xE6, 0x9A, 0x03, 0x7F, 0x6F, 0x94, 0xBF, 0x0D, 0xEF, 0x28,
				0x74, 0x66, 0xAC, 0x14, 0xC1, 0x95, 0xC6, 0xC8, 0x79, 0xFD, 0x1B, 0x78, 0x45, 0x09, 0x66, 0x63,
				0xE4, 0x4A, 0x62, 0x23, 0xF1, 0x28, 0x9D, 0x22, 0x1C, 0x34, 0xDB, 0x64, 0xA2, 0xE3, 0xB6, 0xD2,
				0xF3, 0x15, 0x7B, 0x3A, 0xA5, 0xBB, 0x24, 0x3E, 0xEC, 0x3A, 0x4D, 0xD6, 0x9D, 0xCF, 0x91, 0x1F,
				0x97, 0x2F, 0x10, 0x73, 0x49, 0x6F, 0xA8, 0xC3, 0x67, 0x78, 0xCC, 0xA4, 0x71, 0xA6, 0x98, 0x34,
				0xCF, 0x3B, 0x72, 0xA9, 0x17, 0xF6, 0x0B, 0x00, 0x37, 0x18, 0x77, 0xFB, 0x00, 0xA3, 0x3E, 0x7E,
				0x53, 0xEA, 0x5A, 0xF3, 0xE2, 0xE9, 0xC9, 0x5A, 0x66, 0x51, 0xE2, 0xAE, 0x97, 0x9C, 0xB7, 0xC6,
				0x24, 0x4D, 0x85, 0x08, 0xE9, 0xFD, 0x18, 0x41, 0xF6, 0x7C, 0x08, 0x32, 0xB7, 0x22, 0x63, 0x88,
				0xC6, 0xFD, 0x1A, 0xF3, 0xBA, 0x74, 0x93, 0x0B, 0x65, 0xF7, 0x8E, 0x19, 0xE7, 0x22, 0xB2, 0xD8,
				0x64, 0x62, 0x71, 0x42, 0xEA, 0x82, 0xA4, 0x8C, 0x38, 0xBD, 0x14, 0x5A, 0xB3, 0xBB, 0x33, 0x1F,
				0x9C, 0x86, 0xF6, 0x52, 0x4F, 0x82, 0x94, 0x15, 0x78, 0x69, 0x77, 0x37, 0x4D, 0x51, 0x5A, 0x2A,
				0x2D, 0x4C, 0xBE, 0xE9, 0x0A, 0x89, 0x6F, 0x28, 0xDD, 0x78, 0x6D, 0x9C, 0x57, 0x87, 0x2D, 0xA5,
				0xA1, 0x7E, 0x59, 0xA4, 0xA3, 0x13, 0x5A, 0xAC, 0xC6, 0xE2, 0x9E, 0xF2, 0x0C, 0x31, 0x42, 0x09,
				0xE3, 0xFD, 0x53, 0x67, 0x7F, 0x1B, 0xDC, 0x77, 0xC3, 0xFB, 0xAD, 0x2C, 0x19, 0x21, 0xC4, 0x79,
				0xFC, 0xC7, 0x5B, 0x58, 0xCC, 0x53, 0x95, 0x4C, 0x3B, 0xED, 0xDC, 0x01, 0x23, 0x51, 0xB0, 0xFF,
				0x78, 0x09, 0xCD, 0x81, 0xBB, 0xB7, 0x00, 0x1F, 0x18, 0xD1, 0x7E, 0xA2, 0xCA, 0x5A, 0xF3, 0x6B,
				0x5B, 0xD6, 0x86, 0x18, 0x40, 0x15, 0xC6, 0xD8, 0xA2, 0xF6, 0xFE, 0x0B, 0xE2, 0xB6, 0xE1, 0xE4,
				0x53, 0xD4, 0x79, 0x19, 0x1A, 0x25, 0x24, 0xB3, 0xE5, 0x0D, 0xA3, 0xF0, 0x9B, 0xC1, 0xFC, 0x9A,
				0x3B, 0x7C, 0x0F, 0xB8, 0x63, 0x7C, 0x08, 0x60, 0xE2, 0xB3, 0x3F, 0x23, 0xE1, 0xCD, 0x99, 0x78,
				0x04, 0xF9, 0x0A, 0x97, 0x60, 0xBB, 0xE7, 0xB6, 0xD7, 0xB1, 0xD4, 0xC8, 0x56, 0x61, 0xB5, 0xCF,
				0x34, 0x46, 0x0A, 0x5A, 0x98, 0xED, 0xB7, 0x71, 0xEF, 0xDB, 0x66, 0x57, 0x70, 0x11, 0x07, 0x35,
				0x45, 0x1B, 0x22, 0x4F, 0x14, 0x9F, 0xF0, 0xA0, 0xBA, 0x77, 0xF9, 0x09, 0x3B, 0x72, 0x8D, 0x28,
				0x0D, 0x9D, 0x8B, 0x7A, 0x04, 0x11, 0x16, 0x33, 0x0C, 0xED, 0x77, 0xD1, 0xAF, 0x73, 0x4C, 0x86,
				0xB0, 0x89, 0x42, 0x4F, 0x34, 0x8F, 0x97, 0x0E, 0x20, 0xA0, 0xCE, 0x52, 0xE9, 0x8F, 0x38, 0xE2,
				0xB3, 0x93, 0x54, 0xF0, 0xD3, 0x01, 0x52, 0xCB, 0x3D, 0x09, 0x71, 0xB5, 0xF1, 0x2A, 0x2D, 0x32,
				0x53, 0xAC, 0xAE, 0xDB, 0xA7, 0x41, 0x4E, 0x95, 0xF3, 0x4C, 0xD2, 0xF1, 0x39, 0x7A, 0x4B, 0x87,
				0xF2, 0x97, 0xF5, 0x25, 0x5D, 0x31, 0x3A, 0x32, 0x0F, 0xC4, 0xCE, 0xDF, 0x20, 0x09, 0x7B, 0x9D,
				0x0C, 0xE1, 0x58, 0x76, 0x54, 0xC7, 0x69, 0x21, 0xCA, 0x55, 0xA1, 0x96, 0x66, 0x2E, 0xAF, 0xC7,
				0xA4, 0x96, 0xFB, 0xBA, 0x56, 0x5A, 0x16, 0x85, 0x22, 0x25, 0xA6, 0x62, 0xEA, 0x6B, 0x90, 0xE0,
				0x41, 0x94, 0x51, 0x9A, 0x99, 0xA9, 0x1D, 0x96, 0xF3, 0x4A, 0xE7, 0x89, 0xBF, 0x10, 0xE1, 0x6C,
				0xFE, 0x5E, 0x8C, 0x9E, 0xD8, 0xA0, 0x40, 0x7F, 0x5A, 0x47, 0xBE, 0xF2, 0x80, 0x65, 0xFD, 0x55,
				0x1F, 0xB1, 0xD2, 0x55, 0x7F, 0xDB, 0x32, 0x08, 0x6F, 0x30, 0x1C, 0x58, 0x3D, 0x3B, 0x09, 0x95,
				0xDC, 0xCD, 0x9B, 0x81, 0x02, 0x1A, 0x46, 0x9B, 0x99, 0x0E, 0x44, 0x37, 0x06, 0xFD, 0xD3, 0x33,
				0x4C, 0x92, 0x1F, 0x54, 0x50, 0xCC, 0x40, 0x5A, 0xE4, 0xDB, 0x2D, 0x57, 0xD0, 0x43, 0x44, 0x97,
				0x96, 0x61, 0x36, 0x37, 0x22, 0xE6, 0x8B, 0x44, 0xA3, 0x09, 0x39, 0x6D, 0x73, 0x60, 0xE6, 0xFD,
				0x27, 0xB6, 0x20, 0x7E, 0x2D, 0xE2, 0xAC, 0xBE, 0x35, 0x44, 0xF4, 0x0D, 0x20, 0xF2, 0xC0, 0xA8,
				0x21, 0x23, 0x1D, 0x8F, 0x44, 0x40, 0x68, 0x6B, 0xBA, 0xED, 0xF4, 0xA5, 0x59, 0x04, 0x2A, 0xA5,
				0x6C, 0xB3, 0xBB, 0x8E, 0xA7, 0x43, 0xAC, 0x48, 0xC5, 0xC4, 0x10, 0x0C, 0x8A, 0x33, 0x69, 0x50,
				0xC5, 0x5B, 0x3F, 0x9C, 0x90, 0xCD, 0xA7, 0x51, 0xFB, 0x89, 0x1D, 0xDE, 0x10, 0x5B, 0xEF, 0x35,
				0x56, 0x33, 0xD5, 0xB4, 0xBF, 0x9B, 0xB1, 0x70, 0xC5, 0x7A, 0x54, 0x3F, 0x1C, 0x3C, 0x38, 0x65,
				0x45, 0xB7, 0x11, 0xEF, 0xEF, 0x27, 0x4A, 0x08, 0x9C, 0x13, 0x64, 0x70, 0x14, 0xAE, 0x87, 0xAE,
				0x0E, 0xDD, 0x46, 0x13, 0x2F, 0x0F, 0x3A, 0xF2, 0x64, 0x89, 0x27, 0xE7, 0xA4, 0xA4, 0x95, 0xD7,
				0xDD, 0xB9, 0xF3, 0xE7, 0x84, 0x4E, 0x41, 0x35, 0x20, 0x7B, 0xCB, 0xDD, 0x76, 0x4E, 0x25, 0xAF,
				0xCB, 0x9D, 0xBD, 0xD7, 0x5C, 0x57, 0x16, 0xAE, 0xBB, 0x10, 0xD3, 0xE3, 0x33, 0x75, 0x97, 0x8B,
				0xFE, 0x97, 0x82, 0xC3, 0x81, 0x0D, 0x2C, 0x7B, 0xFC, 0x05, 0x8F, 0x05, 0xCF, 0xCF, 0x06, 0xD3,
				0x6F, 0xAC, 0x79, 0x67, 0xF3, 0x7F, 0x1B, 0xDB, 0xB7, 0xAD, 0x50, 0xE0, 0x71, 0x56, 0x29, 0x5B,
				0x94, 0x4B, 0x37, 0xF2, 0x0F, 0xD4, 0x96, 0xA0, 0x7F, 0xB4, 0x6A, 0x4D, 0x46, 0x3C, 0x2F, 0x52,
				0x69, 0x7E, 0x1E, 0x38, 0x4C, 0xA7, 0x82, 0x8C, 0x03, 0x00, 0x1B, 0x5F, 0x0E, 0x1F, 0x4E, 0x10
			};*/
			byte[] data = {
				0xFF, 0xFF, 0x30, 0x45, 0x92, 0xA9, 0xA8, 0x5B, 0x8E, 0x3A, 0x52, 0x44, 0x15, 0xB1, 0x6B, 0xA4,
				0xAA, 0x62, 0x35, 0x9C, 0x49, 0x63, 0x23, 0xC4, 0xA6, 0x1F, 0x32, 0x53, 0x2E, 0xA4, 0xB9, 0xD2,
				0x8F, 0x38, 0xF2, 0xB5, 0x15, 0x40, 0xA7, 0xA9, 0xE5, 0xEC, 0xF9, 0x5E, 0xA1, 0xBC, 0xA0, 0xFA,
				0x4E, 0xB4, 0xB0, 0xFE, 0x4C, 0x7A, 0x9E, 0x5F, 0x31, 0xEB, 0x3B, 0x95, 0xBF, 0x93, 0x96, 0xB4,
				0xD0, 0x19, 0x92, 0xDE, 0x6D, 0xA6, 0x65, 0x1D, 0x37, 0x9D, 0x61, 0xAC, 0x1D, 0x2A, 0x41, 0x72,
				0x97, 0x4A, 0x47, 0x92, 0x99, 0x0C, 0x8F, 0x4B, 0xDA, 0x73, 0xB6, 0x4B, 0x56, 0x95, 0x79, 0x49,
				0x8F, 0x43, 0xD8, 0x7F, 0x43, 0xD8, 0x64, 0xB6, 0x5A, 0x48, 0x90, 0xC8, 0x4A, 0x70, 0xE7, 0xF3,
				0xFD, 0x77, 0x4A, 0x57, 0x93, 0x8A, 0x3A, 0x73, 0xB7, 0xF3, 0xBA, 0x7C, 0xEF, 0x5D, 0x96, 0x8E,
				0x25, 0x22, 0x83, 0x23, 0xCE, 0xE8, 0xF3, 0x7D, 0x66, 0x0F, 0x59, 0x96, 0x98, 0xF5, 0x57, 0x1A,
				0x82, 0x39, 0x1F, 0x19, 0x79, 0x49, 0xCE, 0x30, 0xCD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x40, 0x80, 0x8A, 0x28, 0x18, 0x81, 0x94, 0x31,
				0x08, 0x08, 0x60, 0x88, 0x10, 0xC2, 0x01, 0x82, 0x02, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x02, 0x80, 0x24, 0x26, 0x07, 0x1C, 0x24, 0x06, 0x54, 0x24, 0x50, 0xE0, 0x46, 0x8E, 0x03,
				0x08, 0x0F, 0x8A, 0x12, 0x02, 0x14, 0xE1, 0x8C, 0x40, 0x14, 0xA0, 0x20, 0x80, 0xE2, 0x85, 0x82,
				0x1A, 0x0C, 0x44, 0x08, 0x60, 0x44, 0x08, 0x60, 0x88, 0x78, 0x08, 0x82, 0x40, 0x48, 0x31, 0x82,
				0x10, 0xF0, 0x28, 0x06, 0x81, 0x10, 0x60, 0x20, 0x18, 0x14, 0x03, 0x00, 0x81, 0x40, 0x50, 0x0C,
				0x01, 0x00, 0x63, 0x01, 0x10, 0x03, 0x02, 0x03, 0x1F, 0x5F, 0x51, 0xD7, 0xE7, 0xCD, 0x3B, 0xDD,
				0xB9, 0xEF, 0x5B, 0xDF, 0x1F, 0xFE, 0x7C, 0xEB, 0xB7, 0xDB, 0xBD, 0xB3, 0xBB, 0xF6, 0x7F, 0xDF,
				0x33, 0xFE, 0xFF, 0xDF, 0x73, 0xF7, 0xB7, 0xED, 0xD7, 0xED, 0xF6, 0xFF, 0xF7, 0xEF, 0xDE, 0xFE,
				0xFF, 0x77, 0xDF, 0xDB, 0xDB, 0xDE, 0xDF, 0xFF, 0xFF, 0xFE, 0xFF, 0x3A, 0xFE, 0x31, 0x6F, 0x7D,
				0xCD, 0xE4, 0x1B, 0x2D, 0x86, 0x6D, 0xDC, 0xCD, 0x59, 0x3A, 0xB3, 0x65, 0xDB, 0xEC, 0xF9, 0xE6,
				0x95, 0xF6, 0xFB, 0xD3, 0x5C, 0xE5, 0xAE, 0xFA, 0xDE, 0x7C, 0xEF, 0xFB, 0x5D, 0xF1, 0xBF, 0xE7,
				0x6B, 0x8C, 0xE7, 0xB5, 0xBE, 0xD6, 0xF3, 0x1B, 0xDA, 0xCF, 0x8D, 0xFE, 0xBF, 0x75, 0xFF, 0xAF,
				0xBD, 0x7F, 0xE9, 0xF8, 0xB3, 0xCE, 0xEE, 0xEE, 0xEE, 0xCD, 0xDD, 0xBB, 0xAE, 0x7F, 0xEF, 0xFA,
				0xDF, 0x8F, 0xFC, 0xCE, 0x7B, 0xF0, 0xFF, 0x79, 0xD6, 0xDF, 0x9F, 0x7F, 0x7F, 0xE0, 0x60, 0x76,
			};
			var frame = new HCAFrame(hca);
			frame.DecodeFrame(data, out double[][] output);

			Log.Visible = false;
			Log.WriteLine();
			Log.WriteLine("{");
			foreach (var o in output)
			{
				Log.WriteLine(o.ToString<double>());
			}
			Log.WriteLine("}");

			hca.Decode();

			var wav = WaveWriter.ConvertToInt16(hca.Waves);

			WaveInfo wavInfo = new WaveInfo { 
				Format = WaveFormat.PCM,
				SampleRate = hca.Info.SampleRate,
				ChannelCount =  (ushort)hca.Info.ChannelCount,
				BitsPerSample = 16
			};
			string outfile = @"output.wav";
			using (var stream = new FileStream(outfile, FileMode.OpenOrCreate, FileAccess.Write))
			{
				WaveWriter.WriteData(new WaveData { Info = wavInfo, AudioData = wav }, stream);
			}

			//var arrays = ArrayUnpacker.UnpackArrays(ArrayUnpacker.PackedTables);
			//var quantizespectrumbits = (byte[][])arrays[0];
			//var quantizespectrumvalue = (byte[][])arrays[1];
			//var quantizedspectrumbits = (byte[][])arrays[2];
			//var quantizedspectrummaxbits = (byte[])arrays[3];
			//var quantizedspectrumvalue = (sbyte[][])arrays[4];
			//var scaletoresolutioncurve = (byte[])arrays[5];
			//var athcurve = (byte[])arrays[6];
			//var mdctwindow = (double[])arrays[7];
			//var defaultchannelmapping = (byte[])arrays[8];
			//var validchannelmappings = (byte[][])arrays[9];

			/*for (var i = 0; i < arrays.Length; i++)
			{
				var builder = new StringBuilder();
				builder.Append("[");
				foreach (var v in arrays[i])
				{
					if (v.GetType() == typeof(byte[]))
					{
						builder.Append("[");
						foreach (var n in (byte[])v)
						{
							builder.Append($"{n},");
						}
						builder.Append("],");
					}
					else if (v.GetType() == typeof(sbyte[]))
					{
						builder.Append("[");
						foreach (var n in (sbyte[])v)
						{
							builder.Append($"{n},");
						}
						builder.Append("],");
					}
					else
					{
						builder.Append($"{v},");
					}
				}
				builder.Append("]");
				Console.WriteLine($"{i}:{builder.ToString()}");
			}*/
		}

	}
}
